{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/slechani/react-ladompteuse-website/src/components/modalchecklist/ModalChecklist.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport './ModalChecklist.css';\nimport closeBtn from '../../assets/img/button_close.png';\nimport closeBtn2x from '../../assets/img/button_close@2x.png';\nimport { withTranslation } from 'react-i18next';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { createVote } from '../../store/root/actions';\nimport { connect } from 'react-redux';\nModal.setAppElement('#root');\nconst styles = {\n  overlay: {\n    zIndex: 10,\n    background: 'none'\n  },\n  content: {\n    border: 'none',\n    padding: 50,\n    backgroundColor: 'black'\n  }\n};\n\nfunction ModalChecklist(props) {\n  _s();\n\n  const [question1, setQuestion1] = useState(false);\n  const [question2, setQuestion2] = useState('');\n  const [question3, setQuestion3] = useState(false);\n  const [question4, setQuestion4] = useState(false);\n  const [question5, setQuestion5] = useState('');\n  const [question6, setQuestion6] = useState('');\n  const {\n    t,\n    isOpen,\n    onClose,\n    createVote,\n    hasVoted\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    style: styles,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-checklist\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeBtn,\n          srcSet: closeBtn2x,\n          onClick: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), hasVoted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: t('main.checklist.dejarepondu')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: t('main.checklist.title')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: true,\n              sm: 8,\n              children: t('main.checklist.question1')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              className: \"offset-sm-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question1\",\n                value: \"true\",\n                label: t('main.checklist.oui'),\n                checked: question1,\n                onChange: () => setQuestion1(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question1\",\n                value: \"false\",\n                label: t('main.checklist.non'),\n                checked: !question1,\n                onChange: () => setQuestion1(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 8,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question2')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question2\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question2,\n                onChange: event => setQuestion2(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: true,\n              sm: 8,\n              children: t('main.checklist.question3')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              className: \"offset-sm-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question3\",\n                value: \"true\",\n                label: t('main.checklist.oui'),\n                checked: question3,\n                onChange: () => setQuestion3(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question3\",\n                value: \"false\",\n                label: t('main.checklist.non'),\n                checked: !question3,\n                onChange: () => setQuestion3(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: true,\n              sm: 8,\n              children: t('main.checklist.question4')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              className: \"offset-sm-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question4\",\n                value: \"true\",\n                label: t('main.checklist.oui'),\n                checked: question4,\n                onChange: () => setQuestion4(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question4\",\n                value: \"false\",\n                label: t('main.checklist.non'),\n                checked: !question4,\n                onChange: () => setQuestion4(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 8,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question5')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question5\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question5,\n                onChange: event => setQuestion5(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 8,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question6')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question6\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question6,\n                onChange: event => setQuestion6(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-light\",\n              onClick: () => createVote({\n                question1,\n                question2,\n                question3,\n                question4,\n                question5,\n                question6\n              }),\n              children: t('main.checklist.envoyer')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalChecklist, \"WJW69s1vZv8GWUEN+zP5KPlDm0w=\");\n\n_c = ModalChecklist;\n\nconst mapStateToProps = state => {\n  return {\n    hasVoted: state.hasVoted\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createVote: vote => dispatch(createVote(vote))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withTranslation()(ModalChecklist));\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalChecklist\");","map":{"version":3,"sources":["/home/slechani/react-ladompteuse-website/src/components/modalchecklist/ModalChecklist.tsx"],"names":["React","useState","Modal","closeBtn","closeBtn2x","withTranslation","Form","Row","Col","Button","createVote","connect","setAppElement","styles","overlay","zIndex","background","content","border","padding","backgroundColor","ModalChecklist","props","question1","setQuestion1","question2","setQuestion2","question3","setQuestion3","question4","setQuestion4","question5","setQuestion5","question6","setQuestion6","t","isOpen","onClose","hasVoted","event","target","value","mapStateToProps","state","mapDispatchToProps","dispatch","vote"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Modal from 'react-modal';\n\nimport './ModalChecklist.css';\n\nimport closeBtn from '../../assets/img/button_close.png';\nimport closeBtn2x from '../../assets/img/button_close@2x.png';\nimport {WithTranslation, withTranslation} from 'react-i18next';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport {RootActionTypes} from '../../store/root/types';\nimport {ReduxAppState} from '../../store';\nimport {createVote, Vote} from '../../store/root/actions';\nimport {connect} from 'react-redux';\nimport {ThunkDispatch} from 'redux-thunk';\nimport {Action} from 'redux';\n\nModal.setAppElement('#root');\n\nconst styles: Modal.Styles = {\n  overlay: {\n    zIndex: 10,\n    background: 'none',\n  },\n  content: {\n    border: 'none',\n    padding: 50,\n    backgroundColor: 'black',\n  },\n};\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose?: () => void;\n};\n\ntype StateProps = {\n  hasVoted: boolean;\n};\ntype DispatchProps = {\n  createVote: (vote: Vote) => Promise<RootActionTypes>;\n};\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\n\nfunction ModalChecklist(props: Props): JSX.Element {\n  const [question1, setQuestion1] = useState(false);\n  const [question2, setQuestion2] = useState('');\n  const [question3, setQuestion3] = useState(false);\n  const [question4, setQuestion4] = useState(false);\n  const [question5, setQuestion5] = useState('');\n  const [question6, setQuestion6] = useState('');\n  const {t, isOpen, onClose, createVote, hasVoted} = props;\n\n  return (\n    <Modal isOpen={isOpen} style={styles}>\n      <div className=\"modal-checklist\">\n        <div className=\"close-btn\">\n          <img src={closeBtn} srcSet={closeBtn2x} onClick={onClose} />\n        </div>\n        {hasVoted ? (\n          <div>{t('main.checklist.dejarepondu')}</div>\n        ) : (\n          <div>\n            <h2>{t('main.checklist.title')}</h2>\n            <Form>\n              <Form.Group as={Row}>\n                <Form.Label column sm={8}>\n                  {t('main.checklist.question1')}\n                </Form.Label>\n                <Col sm={3} className=\"offset-sm-1\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question1\"\n                    value=\"true\"\n                    label={t('main.checklist.oui')}\n                    checked={question1}\n                    onChange={() => setQuestion1(true)}\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question1\"\n                    value=\"false\"\n                    label={t('main.checklist.non')}\n                    checked={!question1}\n                    onChange={() => setQuestion1(false)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Row>\n                <Col sm={8}>\n                  <Form.Label>{t('main.checklist.question2')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question2\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question2}\n                    onChange={(event) => setQuestion2(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Group as={Row}>\n                <Form.Label column sm={8}>\n                  {t('main.checklist.question3')}\n                </Form.Label>\n                <Col sm={3} className=\"offset-sm-1\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question3\"\n                    value=\"true\"\n                    label={t('main.checklist.oui')}\n                    checked={question3}\n                    onChange={() => setQuestion3(true)}\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question3\"\n                    value=\"false\"\n                    label={t('main.checklist.non')}\n                    checked={!question3}\n                    onChange={() => setQuestion3(false)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group as={Row}>\n                <Form.Label column sm={8}>\n                  {t('main.checklist.question4')}\n                </Form.Label>\n                <Col sm={3} className=\"offset-sm-1\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question4\"\n                    value=\"true\"\n                    label={t('main.checklist.oui')}\n                    checked={question4}\n                    onChange={() => setQuestion4(true)}\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question4\"\n                    value=\"false\"\n                    label={t('main.checklist.non')}\n                    checked={!question4}\n                    onChange={() => setQuestion4(false)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Row>\n                <Col sm={8}>\n                  <Form.Label>{t('main.checklist.question5')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question5\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question5}\n                    onChange={(event) => setQuestion5(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Col sm={8}>\n                  <Form.Label>{t('main.checklist.question6')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question6\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question6}\n                    onChange={(event) => setQuestion6(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Button\n                  variant=\"outline-light\"\n                  onClick={() => createVote({question1, question2, question3, question4, question5, question6})}>\n                  {t('main.checklist.envoyer')}\n                </Button>\n              </Form.Row>\n            </Form>\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n}\n\nconst mapStateToProps = (state: ReduxAppState): StateProps => {\n  return {\n    hasVoted: state.hasVoted,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<ReduxAppState, undefined, Action>): DispatchProps => {\n  return {\n    createVote: (vote: Vote) => dispatch(createVote(vote)),\n  };\n};\n\nexport default connect<StateProps, DispatchProps, unknown, ReduxAppState>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withTranslation()(ModalChecklist));\n"]},"metadata":{},"sourceType":"module"}