{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/slechani/react-ladompteuse-website/src/components/modalchecklist/ModalChecklist.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport './ModalChecklist.css';\nimport backgroundTile from '../../assets/img/background-tile.png';\nimport closeBtn from '../../assets/img/button_close.png';\nimport closeBtn2x from '../../assets/img/button_close@2x.png';\nimport { withTranslation } from 'react-i18next';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { createVote } from '../../store/root/actions';\nimport { connect } from 'react-redux';\nModal.setAppElement('#root');\nconst styles = {\n  overlay: {\n    zIndex: 10,\n    background: 'none',\n    backgroundRepeat: 'repeat',\n    backgroundImage: 'url(' + backgroundTile + ')'\n  },\n  content: {\n    border: 'none',\n    padding: 50,\n    backgroundColor: 'black',\n    top: 30,\n    bottom: 30,\n    left: 20,\n    right: 20\n  }\n};\n\nfunction ModalChecklist(props) {\n  _s();\n\n  const [question1, setQuestion1] = useState(undefined);\n  const [question2, setQuestion2] = useState('');\n  const [question3, setQuestion3] = useState('');\n  const [question4, setQuestion4] = useState(undefined);\n  const [question5, setQuestion5] = useState(undefined);\n  const [question6, setQuestion6] = useState('');\n  const [question7, setQuestion7] = useState('');\n  const {\n    t,\n    isOpen,\n    onClose,\n    createVote,\n    hasVoted,\n    code\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    style: styles,\n    bodyOpenClassName: \"ReactModal__Body--open checklist-modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-checklist\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeBtn,\n          srcSet: closeBtn2x,\n          onClick: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), hasVoted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: t('main.checklist.dejarepondu')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: t('main.checklist.title')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: true,\n              sm: 9,\n              children: t('main.checklist.question1')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              className: \"offset-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question1\",\n                value: \"true\",\n                label: t('main.checklist.oui'),\n                checked: question1,\n                onChange: () => setQuestion1(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question1\",\n                value: \"false\",\n                label: t('main.checklist.non'),\n                checked: question1 === false,\n                onChange: () => setQuestion1(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 12,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question2')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question2\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question2,\n                onChange: event => setQuestion2(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 12,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question3')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question3\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question3,\n                onChange: event => setQuestion3(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: true,\n              sm: 9,\n              children: t('main.checklist.question4')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              className: \"offset-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question4\",\n                value: \"true\",\n                label: t('main.checklist.oui'),\n                checked: question4,\n                onChange: () => setQuestion4(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question4\",\n                value: \"false\",\n                label: t('main.checklist.non'),\n                checked: question4 === false,\n                onChange: () => setQuestion4(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Row,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              column: true,\n              sm: 9,\n              children: t('main.checklist.question5')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 3,\n              className: \"offset-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question5\",\n                value: \"true\",\n                label: t('main.checklist.oui'),\n                checked: question5,\n                onChange: () => setQuestion5(true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                inline: true,\n                type: \"radio\",\n                name: \"question5\",\n                value: \"false\",\n                label: t('main.checklist.non'),\n                checked: question5 === false,\n                onChange: () => setQuestion5(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 12,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question6')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question6\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question6,\n                onChange: event => setQuestion6(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 12,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: t('main.checklist.question7')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                className: \"notes\",\n                as: \"textarea\",\n                name: \"question7\",\n                \"aria-rowcount\": 2,\n                maxLength: 250,\n                value: question7,\n                onChange: event => setQuestion7(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 12,\n              children: /*#__PURE__*/_jsxDEV(Form.Label, {\n                style: {\n                  opacity: 0.4\n                },\n                children: t('main.checklist.gdpr')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            className: \"form-footer\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-light\",\n              disabled: question1 === undefined || question4 === undefined || question5 === undefined,\n              onClick: () => {\n                if (question1 !== undefined && question4 !== undefined && question5 !== undefined) {\n                  createVote({\n                    question1,\n                    question2,\n                    question3,\n                    question4,\n                    question5,\n                    question6,\n                    question7,\n                    code\n                  });\n                }\n              },\n              children: t('main.checklist.envoyer')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalChecklist, \"IxYgy7krz+BTyMc1lWfCca/50wU=\");\n\n_c = ModalChecklist;\n\nconst mapStateToProps = state => {\n  return {\n    hasVoted: state.hasVoted,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    code: state.code\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createVote: vote => dispatch(createVote(vote))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withTranslation()(ModalChecklist));\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalChecklist\");","map":{"version":3,"sources":["/home/slechani/react-ladompteuse-website/src/components/modalchecklist/ModalChecklist.tsx"],"names":["React","useState","Modal","backgroundTile","closeBtn","closeBtn2x","withTranslation","Form","Row","Col","Button","createVote","connect","setAppElement","styles","overlay","zIndex","background","backgroundRepeat","backgroundImage","content","border","padding","backgroundColor","top","bottom","left","right","ModalChecklist","props","question1","setQuestion1","undefined","question2","setQuestion2","question3","setQuestion3","question4","setQuestion4","question5","setQuestion5","question6","setQuestion6","question7","setQuestion7","t","isOpen","onClose","hasVoted","code","event","target","value","opacity","mapStateToProps","state","mapDispatchToProps","dispatch","vote"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Modal from 'react-modal';\n\nimport './ModalChecklist.css';\n\nimport backgroundTile from '../../assets/img/background-tile.png';\nimport closeBtn from '../../assets/img/button_close.png';\nimport closeBtn2x from '../../assets/img/button_close@2x.png';\nimport {WithTranslation, withTranslation} from 'react-i18next';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport {RootActionTypes} from '../../store/root/types';\nimport {ReduxAppState} from '../../store';\nimport {createVote, Vote} from '../../store/root/actions';\nimport {connect} from 'react-redux';\nimport {ThunkDispatch} from 'redux-thunk';\nimport {Action} from 'redux';\n\nModal.setAppElement('#root');\n\nconst styles: Modal.Styles = {\n  overlay: {\n    zIndex: 10,\n    background: 'none',\n    backgroundRepeat: 'repeat',\n    backgroundImage: 'url(' + backgroundTile + ')',\n  },\n  content: {\n    border: 'none',\n    padding: 50,\n    backgroundColor: 'black',\n    top: 30,\n    bottom: 30,\n    left: 20,\n    right: 20,\n  },\n};\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose?: () => void;\n};\n\ntype StateProps = {\n  hasVoted: boolean;\n  code: string;\n};\ntype DispatchProps = {\n  createVote: (vote: Vote) => Promise<RootActionTypes>;\n};\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\n\nfunction ModalChecklist(props: Props): JSX.Element {\n  const [question1, setQuestion1] = useState<boolean | undefined>(undefined);\n  const [question2, setQuestion2] = useState('');\n  const [question3, setQuestion3] = useState('');\n  const [question4, setQuestion4] = useState<boolean | undefined>(undefined);\n  const [question5, setQuestion5] = useState<boolean | undefined>(undefined);\n  const [question6, setQuestion6] = useState('');\n  const [question7, setQuestion7] = useState('');\n  const {t, isOpen, onClose, createVote, hasVoted, code} = props;\n\n  return (\n    <Modal isOpen={isOpen} style={styles} bodyOpenClassName=\"ReactModal__Body--open checklist-modal\">\n      <div className=\"modal-checklist\">\n        <div className=\"close-btn\">\n          <img src={closeBtn} srcSet={closeBtn2x} onClick={onClose} />\n        </div>\n        {hasVoted ? (\n          <div>{t('main.checklist.dejarepondu')}</div>\n        ) : (\n          <div>\n            <h2>{t('main.checklist.title')}</h2>\n            <Form>\n              <Form.Group as={Row}>\n                <Form.Label column sm={9}>\n                  {t('main.checklist.question1')}\n                </Form.Label>\n                <Col sm={3} className=\"offset-1\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question1\"\n                    value=\"true\"\n                    label={t('main.checklist.oui')}\n                    checked={question1}\n                    onChange={() => setQuestion1(true)}\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question1\"\n                    value=\"false\"\n                    label={t('main.checklist.non')}\n                    checked={question1 === false}\n                    onChange={() => setQuestion1(false)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Row>\n                <Col sm={12}>\n                  <Form.Label>{t('main.checklist.question2')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question2\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question2}\n                    onChange={(event) => setQuestion2(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Col sm={12}>\n                  <Form.Label>{t('main.checklist.question3')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question3\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question3}\n                    onChange={(event) => setQuestion3(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Group as={Row}>\n                <Form.Label column sm={9}>\n                  {t('main.checklist.question4')}\n                </Form.Label>\n                <Col sm={3} className=\"offset-1\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question4\"\n                    value=\"true\"\n                    label={t('main.checklist.oui')}\n                    checked={question4}\n                    onChange={() => setQuestion4(true)}\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question4\"\n                    value=\"false\"\n                    label={t('main.checklist.non')}\n                    checked={question4 === false}\n                    onChange={() => setQuestion4(false)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group as={Row}>\n                <Form.Label column sm={9}>\n                  {t('main.checklist.question5')}\n                </Form.Label>\n                <Col sm={3} className=\"offset-1\">\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question5\"\n                    value=\"true\"\n                    label={t('main.checklist.oui')}\n                    checked={question5}\n                    onChange={() => setQuestion5(true)}\n                  />\n                  <Form.Check\n                    inline\n                    type=\"radio\"\n                    name=\"question5\"\n                    value=\"false\"\n                    label={t('main.checklist.non')}\n                    checked={question5 === false}\n                    onChange={() => setQuestion5(false)}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Row>\n                <Col sm={12}>\n                  <Form.Label>{t('main.checklist.question6')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question6\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question6}\n                    onChange={(event) => setQuestion6(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Col sm={12}>\n                  <Form.Label>{t('main.checklist.question7')}</Form.Label>\n                  <Form.Control\n                    className=\"notes\"\n                    as=\"textarea\"\n                    name=\"question7\"\n                    aria-rowcount={2}\n                    maxLength={250}\n                    value={question7}\n                    onChange={(event) => setQuestion7(event.target.value)}\n                  />\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Col sm={12}>\n                  <Form.Label style={{opacity: 0.4}}>{t('main.checklist.gdpr')}</Form.Label>\n                </Col>\n              </Form.Row>\n              <Form.Row className=\"form-footer\">\n                <Button\n                  variant=\"outline-light\"\n                  disabled={question1 === undefined || question4 === undefined || question5 === undefined}\n                  onClick={() => {\n                    if (question1 !== undefined && question4 !== undefined && question5 !== undefined) {\n                      createVote({question1, question2, question3, question4, question5, question6, question7, code});\n                    }\n                  }}>\n                  {t('main.checklist.envoyer')}\n                </Button>\n              </Form.Row>\n            </Form>\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n}\n\nconst mapStateToProps = (state: ReduxAppState): StateProps => {\n  return {\n    hasVoted: state.hasVoted,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    code: state.code!,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<ReduxAppState, undefined, Action>): DispatchProps => {\n  return {\n    createVote: (vote: Vote) => dispatch(createVote(vote)),\n  };\n};\n\nexport default connect<StateProps, DispatchProps, unknown, ReduxAppState>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withTranslation()(ModalChecklist));\n"]},"metadata":{},"sourceType":"module"}