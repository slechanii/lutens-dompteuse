{"ast":null,"code":"/*!\n * MotionPathPlugin 3.6.0\n * https://greensock.com\n *\n * @license Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\n\nvar _xProps = \"x,translateX,left,marginLeft,xPercent\".split(\",\"),\n    _yProps = \"y,translateY,top,marginTop,yPercent\".split(\",\"),\n    _DEG2RAD = Math.PI / 180,\n    gsap,\n    PropTween,\n    _getUnit,\n    _toArray,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\n  //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.\n  var l = values.length,\n      si = mode === 2 ? 0 : mode,\n      i = 0,\n      v;\n\n  for (; i < l; i++) {\n    segment[si] = v = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n},\n    _getPropNum = function _getPropNum(target, prop, unit) {\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\n},\n    _relativize = function _relativize(segment) {\n  var x = segment[0],\n      y = segment[1],\n      i;\n\n  for (i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n},\n    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars, unitX, unitY) {\n  if (vars.type === \"cubic\") {\n    segment = [segment];\n  } else {\n    segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);\n    vars.relative && _relativize(segment);\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\n    segment = [pointFunc(segment, vars.curviness)];\n  }\n\n  segment = slicer(_align(segment, target, vars));\n\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", unitX);\n\n  y && _addDimensionalPropTween(plugin, target, y, segment, \"y\", unitY);\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\n},\n    _emptyFunc = function _emptyFunc(v) {\n  return v;\n},\n    _numExp = /[-+\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/g,\n    _originToPoint = function _originToPoint(element, origin, parentMatrix) {\n  // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be \"auto\" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.\n  var m = getGlobalMatrix(element),\n      svg,\n      x,\n      y;\n\n  if ((element.tagName + \"\").toLowerCase() === \"svg\") {\n    svg = element.viewBox.baseVal;\n    x = svg.x;\n    y = svg.y;\n    svg.width || (svg = {\n      width: +element.getAttribute(\"width\"),\n      height: +element.getAttribute(\"height\")\n    });\n  } else {\n    svg = origin && element.getBBox && element.getBBox();\n    x = y = 0;\n  }\n\n  if (origin && origin !== \"auto\") {\n    x += origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;\n    y += origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;\n  }\n\n  return parentMatrix.apply(x || y ? m.apply({\n    x: x,\n    y: y\n  }) : {\n    x: m.e,\n    y: m.f\n  });\n},\n    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {\n  var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),\n      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),\n      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),\n      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),\n      x = _originToPoint2.x,\n      y = _originToPoint2.y,\n      p;\n\n  m.e = m.f = 0;\n\n  if (toOrigin === \"auto\" && toElement.getTotalLength && toElement.tagName.toLowerCase() === \"path\") {\n    p = toElement.getAttribute(\"d\").match(_numExp) || [];\n    p = m.apply({\n      x: +p[0],\n      y: +p[1]\n    });\n    x += p.x;\n    y += p.y;\n  }\n\n  if (p || toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement) {\n    p = m.apply(toElement.getBBox());\n    x -= p.x;\n    y -= p.y;\n  }\n\n  m.e = x - fromPoint.x;\n  m.f = y - fromPoint.y;\n  return m;\n},\n    _align = function _align(rawPath, target, _ref) {\n  var align = _ref.align,\n      matrix = _ref.matrix,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      alignOrigin = _ref.alignOrigin;\n\n  var x = rawPath[0][0],\n      y = rawPath[0][1],\n      curX = _getPropNum(target, \"x\"),\n      curY = _getPropNum(target, \"y\"),\n      alignTarget,\n      m,\n      p;\n\n  if (!rawPath || !rawPath.length) {\n    return getRawPath(\"M0,0L0,0\");\n  }\n\n  if (align) {\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\n      transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);\n    } else {\n      if (alignOrigin && alignOrigin[2] !== false) {\n        gsap.set(target, {\n          transformOrigin: alignOrigin[0] * 100 + \"% \" + alignOrigin[1] * 100 + \"%\"\n        });\n      } else {\n        alignOrigin = [_getPropNum(target, \"xPercent\") / -100, _getPropNum(target, \"yPercent\") / -100];\n      }\n\n      m = _getAlignMatrix(target, alignTarget, alignOrigin, \"auto\");\n      p = m.apply({\n        x: x,\n        y: y\n      });\n      transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));\n    }\n  }\n\n  if (matrix) {\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  } else if (offsetX || offsetY) {\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\n  }\n\n  return rawPath;\n},\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\n  var cache = target._gsap,\n      harness = cache.harness,\n      alias = harness && harness.aliases && harness.aliases[property],\n      prop = alias && alias.indexOf(\",\") < 0 ? alias : property,\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\n  pt.path = rawPath;\n  pt.pp = pathProperty;\n\n  plugin._props.push(prop);\n},\n    _sliceModifier = function _sliceModifier(start, end) {\n  return function (rawPath) {\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\n  };\n};\n\nexport var MotionPathPlugin = {\n  version: \"3.6.0\",\n  name: \"motionPath\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _getUnit = gsap.utils.getUnit;\n    _toArray = gsap.utils.toArray;\n    PropTween = propTween;\n  },\n  init: function init(target, vars) {\n    if (!gsap) {\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\n      return false;\n    }\n\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\n      vars = {\n        path: vars\n      };\n    }\n\n    var rawPaths = [],\n        _vars = vars,\n        path = _vars.path,\n        autoRotate = _vars.autoRotate,\n        unitX = _vars.unitX,\n        unitY = _vars.unitY,\n        x = _vars.x,\n        y = _vars.y,\n        firstObj = path[0],\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\n        rawPath,\n        p;\n\n    this.rawPaths = rawPaths;\n    this.target = target;\n\n    if (this.rotate = autoRotate || autoRotate === 0) {\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\n      this.rOffset = parseFloat(autoRotate) || 0;\n      this.radians = !!vars.useRadians;\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\n\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\n\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\n    }\n\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\n      for (p in firstObj) {\n        if (!x && ~_xProps.indexOf(p)) {\n          x = p;\n        } else if (!y && ~_yProps.indexOf(p)) {\n          y = p;\n        }\n      }\n\n      if (x && y) {\n        //correlated values\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));\n      } else {\n        x = y = 0;\n      }\n\n      for (p in firstObj) {\n        p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));\n      }\n    } else {\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\n      cacheRawPathMeasurements(rawPath, vars.resolution);\n      rawPaths.push(rawPath);\n\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\n\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\n    }\n  },\n  render: function render(ratio, data) {\n    var rawPaths = data.rawPaths,\n        i = rawPaths.length,\n        pt = data._pt;\n\n    if (ratio > 1) {\n      ratio = 1;\n    } else if (ratio < 0) {\n      ratio = 0;\n    }\n\n    while (i--) {\n      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\n    }\n\n    while (pt) {\n      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\n      pt = pt._next;\n    }\n\n    data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\n  },\n  getLength: function getLength(path) {\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\n  },\n  sliceRawPath: sliceRawPath,\n  getRawPath: getRawPath,\n  pointsToSegment: pointsToSegment,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  transformRawPath: transformRawPath,\n  getGlobalMatrix: getGlobalMatrix,\n  getPositionOnPath: getPositionOnPath,\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {\n    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));\n    return point ? m.apply(point) : m;\n  },\n  getAlignMatrix: _getAlignMatrix,\n  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {\n    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);\n\n    return {\n      x: m.e,\n      y: m.f\n    };\n  },\n  arrayToRawPath: function arrayToRawPath(value, vars) {\n    vars = vars || {};\n\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\n\n    vars.relative && _relativize(segment);\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\n  }\n};\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\nexport { MotionPathPlugin as default };","map":{"version":3,"sources":["/home/slechani/dompteuse-react/node_modules/gsap/MotionPathPlugin.js"],"names":["getRawPath","cacheRawPathMeasurements","getPositionOnPath","pointsToSegment","flatPointsToSegment","sliceRawPath","stringToRawPath","rawPathToString","transformRawPath","convertToPath","_convertToPath","getGlobalMatrix","_xProps","split","_yProps","_DEG2RAD","Math","PI","gsap","PropTween","_getUnit","_toArray","_getGSAP","window","registerPlugin","_populateSegmentFromArray","segment","values","property","mode","l","length","si","i","v","parseFloat","_getPropNum","target","prop","unit","_gsap","get","_relativize","x","y","_segmentToRawPath","plugin","slicer","vars","unitX","unitY","type","unshift","relative","pointFunc","curviness","_align","_addDimensionalPropTween","resolution","_emptyFunc","_numExp","_originToPoint","element","origin","parentMatrix","m","svg","tagName","toLowerCase","viewBox","baseVal","width","getAttribute","height","getBBox","push","offsetWidth","offsetHeight","apply","e","f","_getAlignMatrix","fromElement","toElement","fromOrigin","toOrigin","parentNode","clone","multiply","fromPoint","_originToPoint2","p","getTotalLength","match","ownerSVGElement","rawPath","_ref","align","matrix","offsetX","offsetY","alignOrigin","curX","curY","alignTarget","set","transformOrigin","a","b","c","d","pathProperty","forceUnit","cache","harness","alias","aliases","indexOf","pt","_pt","u","path","pp","_props","_sliceModifier","start","end","MotionPathPlugin","version","name","register","core","Plugin","propTween","utils","getUnit","toArray","init","console","warn","style","rawPaths","_vars","autoRotate","firstObj","rotate","rOffset","radians","useRadians","rProp","rotation","rSet","ru","Array","isArray","render","ratio","data","t","_next","angle","getLength","totalLength","targets","swap","map","convertCoordinates","point","getAlignMatrix","getRelativePosition","arrayToRawPath","value","default"],"mappings":"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","sourcesContent":["/*!\n * MotionPathPlugin 3.6.0\n * https://greensock.com\n *\n * @license Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath as _convertToPath } from \"./utils/paths.js\";\nimport { getGlobalMatrix } from \"./utils/matrix.js\";\n\nvar _xProps = \"x,translateX,left,marginLeft,xPercent\".split(\",\"),\n    _yProps = \"y,translateY,top,marginTop,yPercent\".split(\",\"),\n    _DEG2RAD = Math.PI / 180,\n    gsap,\n    PropTween,\n    _getUnit,\n    _toArray,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _populateSegmentFromArray = function _populateSegmentFromArray(segment, values, property, mode) {\n  //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.\n  var l = values.length,\n      si = mode === 2 ? 0 : mode,\n      i = 0,\n      v;\n\n  for (; i < l; i++) {\n    segment[si] = v = parseFloat(values[i][property]);\n    mode === 2 && (segment[si + 1] = 0);\n    si += 2;\n  }\n\n  return segment;\n},\n    _getPropNum = function _getPropNum(target, prop, unit) {\n  return parseFloat(target._gsap.get(target, prop, unit || \"px\")) || 0;\n},\n    _relativize = function _relativize(segment) {\n  var x = segment[0],\n      y = segment[1],\n      i;\n\n  for (i = 2; i < segment.length; i += 2) {\n    x = segment[i] += x;\n    y = segment[i + 1] += y;\n  }\n},\n    _segmentToRawPath = function _segmentToRawPath(plugin, segment, target, x, y, slicer, vars, unitX, unitY) {\n  if (vars.type === \"cubic\") {\n    segment = [segment];\n  } else {\n    segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);\n    vars.relative && _relativize(segment);\n    var pointFunc = y ? pointsToSegment : flatPointsToSegment;\n    segment = [pointFunc(segment, vars.curviness)];\n  }\n\n  segment = slicer(_align(segment, target, vars));\n\n  _addDimensionalPropTween(plugin, target, x, segment, \"x\", unitX);\n\n  y && _addDimensionalPropTween(plugin, target, y, segment, \"y\", unitY);\n  return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.\n},\n    _emptyFunc = function _emptyFunc(v) {\n  return v;\n},\n    _numExp = /[-+\\.]*\\d+[\\.e\\-\\+]*\\d*[e\\-\\+]*\\d*/g,\n    _originToPoint = function _originToPoint(element, origin, parentMatrix) {\n  // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be \"auto\" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.\n  var m = getGlobalMatrix(element),\n      svg,\n      x,\n      y;\n\n  if ((element.tagName + \"\").toLowerCase() === \"svg\") {\n    svg = element.viewBox.baseVal;\n    x = svg.x;\n    y = svg.y;\n    svg.width || (svg = {\n      width: +element.getAttribute(\"width\"),\n      height: +element.getAttribute(\"height\")\n    });\n  } else {\n    svg = origin && element.getBBox && element.getBBox();\n    x = y = 0;\n  }\n\n  if (origin && origin !== \"auto\") {\n    x += origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;\n    y += origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;\n  }\n\n  return parentMatrix.apply(x || y ? m.apply({\n    x: x,\n    y: y\n  }) : {\n    x: m.e,\n    y: m.f\n  });\n},\n    _getAlignMatrix = function _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin) {\n  var parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),\n      m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),\n      fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),\n      _originToPoint2 = _originToPoint(toElement, toOrigin, parentMatrix),\n      x = _originToPoint2.x,\n      y = _originToPoint2.y,\n      p;\n\n  m.e = m.f = 0;\n\n  if (toOrigin === \"auto\" && toElement.getTotalLength && toElement.tagName.toLowerCase() === \"path\") {\n    p = toElement.getAttribute(\"d\").match(_numExp) || [];\n    p = m.apply({\n      x: +p[0],\n      y: +p[1]\n    });\n    x += p.x;\n    y += p.y;\n  }\n\n  if (p || toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement) {\n    p = m.apply(toElement.getBBox());\n    x -= p.x;\n    y -= p.y;\n  }\n\n  m.e = x - fromPoint.x;\n  m.f = y - fromPoint.y;\n  return m;\n},\n    _align = function _align(rawPath, target, _ref) {\n  var align = _ref.align,\n      matrix = _ref.matrix,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      alignOrigin = _ref.alignOrigin;\n\n  var x = rawPath[0][0],\n      y = rawPath[0][1],\n      curX = _getPropNum(target, \"x\"),\n      curY = _getPropNum(target, \"y\"),\n      alignTarget,\n      m,\n      p;\n\n  if (!rawPath || !rawPath.length) {\n    return getRawPath(\"M0,0L0,0\");\n  }\n\n  if (align) {\n    if (align === \"self\" || (alignTarget = _toArray(align)[0] || target) === target) {\n      transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);\n    } else {\n      if (alignOrigin && alignOrigin[2] !== false) {\n        gsap.set(target, {\n          transformOrigin: alignOrigin[0] * 100 + \"% \" + alignOrigin[1] * 100 + \"%\"\n        });\n      } else {\n        alignOrigin = [_getPropNum(target, \"xPercent\") / -100, _getPropNum(target, \"yPercent\") / -100];\n      }\n\n      m = _getAlignMatrix(target, alignTarget, alignOrigin, \"auto\");\n      p = m.apply({\n        x: x,\n        y: y\n      });\n      transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));\n    }\n  }\n\n  if (matrix) {\n    transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  } else if (offsetX || offsetY) {\n    transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);\n  }\n\n  return rawPath;\n},\n    _addDimensionalPropTween = function _addDimensionalPropTween(plugin, target, property, rawPath, pathProperty, forceUnit) {\n  var cache = target._gsap,\n      harness = cache.harness,\n      alias = harness && harness.aliases && harness.aliases[property],\n      prop = alias && alias.indexOf(\",\") < 0 ? alias : property,\n      pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));\n  pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;\n  pt.path = rawPath;\n  pt.pp = pathProperty;\n\n  plugin._props.push(prop);\n},\n    _sliceModifier = function _sliceModifier(start, end) {\n  return function (rawPath) {\n    return start || end !== 1 ? sliceRawPath(rawPath, start, end) : rawPath;\n  };\n};\n\nexport var MotionPathPlugin = {\n  version: \"3.6.0\",\n  name: \"motionPath\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n    _getUnit = gsap.utils.getUnit;\n    _toArray = gsap.utils.toArray;\n    PropTween = propTween;\n  },\n  init: function init(target, vars) {\n    if (!gsap) {\n      console.warn(\"Please gsap.registerPlugin(MotionPathPlugin)\");\n      return false;\n    }\n\n    if (!(typeof vars === \"object\" && !vars.style) || !vars.path) {\n      vars = {\n        path: vars\n      };\n    }\n\n    var rawPaths = [],\n        _vars = vars,\n        path = _vars.path,\n        autoRotate = _vars.autoRotate,\n        unitX = _vars.unitX,\n        unitY = _vars.unitY,\n        x = _vars.x,\n        y = _vars.y,\n        firstObj = path[0],\n        slicer = _sliceModifier(vars.start, \"end\" in vars ? vars.end : 1),\n        rawPath,\n        p;\n\n    this.rawPaths = rawPaths;\n    this.target = target;\n\n    if (this.rotate = autoRotate || autoRotate === 0) {\n      //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.\n      this.rOffset = parseFloat(autoRotate) || 0;\n      this.radians = !!vars.useRadians;\n      this.rProp = vars.rotation || \"rotation\"; // rotation property\n\n      this.rSet = target._gsap.set(target, this.rProp, this); // rotation setter\n\n      this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0; // rotation units\n    }\n\n    if (Array.isArray(path) && !(\"closed\" in path) && typeof firstObj !== \"number\") {\n      for (p in firstObj) {\n        if (!x && ~_xProps.indexOf(p)) {\n          x = p;\n        } else if (!y && ~_yProps.indexOf(p)) {\n          y = p;\n        }\n      }\n\n      if (x && y) {\n        //correlated values\n        rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));\n      } else {\n        x = y = 0;\n      }\n\n      for (p in firstObj) {\n        p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));\n      }\n    } else {\n      rawPath = slicer(_align(getRawPath(vars.path), target, vars));\n      cacheRawPathMeasurements(rawPath, vars.resolution);\n      rawPaths.push(rawPath);\n\n      _addDimensionalPropTween(this, target, vars.x || \"x\", rawPath, \"x\", vars.unitX || \"px\");\n\n      _addDimensionalPropTween(this, target, vars.y || \"y\", rawPath, \"y\", vars.unitY || \"px\");\n    }\n  },\n  render: function render(ratio, data) {\n    var rawPaths = data.rawPaths,\n        i = rawPaths.length,\n        pt = data._pt;\n\n    if (ratio > 1) {\n      ratio = 1;\n    } else if (ratio < 0) {\n      ratio = 0;\n    }\n\n    while (i--) {\n      getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);\n    }\n\n    while (pt) {\n      pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);\n      pt = pt._next;\n    }\n\n    data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);\n  },\n  getLength: function getLength(path) {\n    return cacheRawPathMeasurements(getRawPath(path)).totalLength;\n  },\n  sliceRawPath: sliceRawPath,\n  getRawPath: getRawPath,\n  pointsToSegment: pointsToSegment,\n  stringToRawPath: stringToRawPath,\n  rawPathToString: rawPathToString,\n  transformRawPath: transformRawPath,\n  getGlobalMatrix: getGlobalMatrix,\n  getPositionOnPath: getPositionOnPath,\n  cacheRawPathMeasurements: cacheRawPathMeasurements,\n  convertToPath: function convertToPath(targets, swap) {\n    return _toArray(targets).map(function (target) {\n      return _convertToPath(target, swap !== false);\n    });\n  },\n  convertCoordinates: function convertCoordinates(fromElement, toElement, point) {\n    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));\n    return point ? m.apply(point) : m;\n  },\n  getAlignMatrix: _getAlignMatrix,\n  getRelativePosition: function getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {\n    var m = _getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);\n\n    return {\n      x: m.e,\n      y: m.f\n    };\n  },\n  arrayToRawPath: function arrayToRawPath(value, vars) {\n    vars = vars || {};\n\n    var segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || \"x\", 0), value, vars.y || \"y\", 1);\n\n    vars.relative && _relativize(segment);\n    return [vars.type === \"cubic\" ? segment : pointsToSegment(segment, vars.curviness)];\n  }\n};\n_getGSAP() && gsap.registerPlugin(MotionPathPlugin);\nexport { MotionPathPlugin as default };"]},"metadata":{},"sourceType":"module"}