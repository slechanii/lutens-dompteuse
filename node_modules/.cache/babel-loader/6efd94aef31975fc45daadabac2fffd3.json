{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/slechani/react-ladompteuse-website/src/components/videomodal/VideoModal.tsx\";\nimport React, { createRef } from 'react';\nimport videojs from 'video.js';\nimport gsap from 'gsap';\nimport Modal from 'react-modal';\nModal.setAppElement('#root');\nconst styles = {\n  content: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    inset: 0,\n    width: '100vw',\n    height: '100vh',\n    padding: 0,\n    overflow: 'hidden',\n    border: 'none',\n    zIndex: 3000,\n    backgroundColor: 'black'\n  },\n  overlay: {\n    zIndex: 10,\n    backgroundColor: 'black'\n  }\n};\nconst options = {\n  html5: true,\n  fluid: true,\n  loop: false,\n  muted: true,\n  controls: false,\n  fill: true,\n  preload: 'auto'\n};\n\nclass VideoModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.ref = /*#__PURE__*/createRef();\n    this.videoJs = null;\n\n    this._setupVideoJs = () => {\n      var _this$ref$current;\n\n      console.log('_setupVideoJs');\n      const videoElement = (_this$ref$current = this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.querySelector('video');\n      console.log({\n        videoElement,\n        ref: this.ref.current\n      });\n\n      if (videoElement !== undefined && videoElement !== null) {\n        this.videoJs = videojs(videoElement, options);\n        this.videoJs.one('ended', () => this._onVideoEnd());\n        this.videoJs.muted(true);\n        this.videoJs.loop(false);\n        this.videoJs.playsinline(true);\n        this.videoJs.autoplay('muted');\n        this.videoJs.autoplay(true);\n      }\n    };\n\n    this._dispose = () => {\n      console.log('_dispose');\n\n      if (this.videoJs !== null) {\n        this.videoJs.dispose();\n        this.videoJs = null;\n      }\n    };\n\n    this._onVideoEnd = () => {\n      console.log('_onVideoEnd');\n      gsap.timeline({\n        onComplete: () => {\n          if (this.props.onVideoEnded) {\n            this.props.onVideoEnded();\n          }\n        }\n      }).to(this.ref.current, {\n        opacity: 0,\n        duration: 3\n      });\n    };\n\n    this._onAfterOpen = () => {\n      console.log('_onAfterOpen');\n\n      this._setupVideoJs();\n\n      gsap.fromTo(this.ref.current, {\n        opacity: 0\n      }, {\n        opacity: 1,\n        duration: 3\n      });\n    };\n  }\n\n  componentDidUpdate() {\n    this._dispose();\n\n    this._setupVideoJs();\n  }\n\n  componentWillUnmount() {\n    this._dispose();\n  }\n\n  render() {\n    const {\n      isOpen,\n      video,\n      videoWebm\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      style: styles,\n      onAfterOpen: this._onAfterOpen,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.ref,\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"video-js vjs-16-9 vjs-control-bar\",\n          muted: true,\n          playsInline: true,\n          \"webkit-playsinline\": \"true\",\n          controls: false,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: video\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"source\", {\n            src: videoWebm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default VideoModal;","map":{"version":3,"sources":["/home/slechani/react-ladompteuse-website/src/components/videomodal/VideoModal.tsx"],"names":["React","createRef","videojs","gsap","Modal","setAppElement","styles","content","top","left","right","bottom","inset","width","height","padding","overflow","border","zIndex","backgroundColor","overlay","options","html5","fluid","loop","muted","controls","fill","preload","VideoModal","Component","ref","videoJs","_setupVideoJs","console","log","videoElement","current","querySelector","undefined","one","_onVideoEnd","playsinline","autoplay","_dispose","dispose","timeline","onComplete","props","onVideoEnded","to","opacity","duration","_onAfterOpen","fromTo","componentDidUpdate","componentWillUnmount","render","isOpen","video","videoWebm"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\nimport videojs, {VideoJsPlayer} from 'video.js';\nimport gsap from 'gsap';\n\nimport Modal from 'react-modal';\nModal.setAppElement('#root');\n\ntype Props = {\n  isOpen: boolean;\n  video: string;\n  videoWebm: string;\n  onVideoEnded?: () => void;\n};\n\nconst styles: Modal.Styles = {\n  content: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    inset: 0,\n    width: '100vw',\n    height: '100vh',\n    padding: 0,\n    overflow: 'hidden',\n    border: 'none',\n    zIndex: 3000,\n    backgroundColor: 'black',\n  },\n  overlay: {\n    zIndex: 10,\n    backgroundColor: 'black',\n  },\n};\n\nconst options = {\n  html5: true,\n  fluid: true,\n  loop: false,\n  muted: true,\n  controls: false,\n  fill: true,\n  preload: 'auto',\n};\n\nclass VideoModal extends React.Component<Props> {\n  private ref = createRef<HTMLDivElement>();\n  private videoJs: VideoJsPlayer | null = null;\n\n  componentDidUpdate(): void {\n    this._dispose();\n    this._setupVideoJs();\n  }\n\n  componentWillUnmount(): void {\n    this._dispose();\n  }\n\n  _setupVideoJs = (): void => {\n    console.log('_setupVideoJs');\n    const videoElement = this.ref.current?.querySelector('video');\n    console.log({videoElement, ref: this.ref.current});\n    if (videoElement !== undefined && videoElement !== null) {\n      this.videoJs = videojs(videoElement, options);\n      this.videoJs.one('ended', () => this._onVideoEnd());\n      this.videoJs.muted(true);\n      this.videoJs.loop(false);\n      this.videoJs.playsinline(true);\n      this.videoJs.autoplay('muted');\n      this.videoJs.autoplay(true);\n    }\n  };\n\n  _dispose = (): void => {\n    console.log('_dispose');\n    if (this.videoJs !== null) {\n      this.videoJs.dispose();\n      this.videoJs = null;\n    }\n  };\n\n  _onVideoEnd = (): void => {\n    console.log('_onVideoEnd');\n    gsap\n      .timeline({\n        onComplete: () => {\n          if (this.props.onVideoEnded) {\n            this.props.onVideoEnded();\n          }\n        },\n      })\n      .to(this.ref.current, {opacity: 0, duration: 3});\n  };\n\n  _onAfterOpen = (): void => {\n    console.log('_onAfterOpen');\n    this._setupVideoJs();\n    gsap.fromTo(this.ref.current, {opacity: 0}, {opacity: 1, duration: 3});\n  };\n\n  render(): JSX.Element {\n    const {isOpen, video, videoWebm} = this.props;\n    return (\n      <Modal isOpen={isOpen} style={styles} onAfterOpen={this._onAfterOpen}>\n        <div ref={this.ref}>\n          <video\n            className=\"video-js vjs-16-9 vjs-control-bar\"\n            muted\n            playsInline\n            webkit-playsinline=\"true\"\n            controls={false}>\n            <source src={video} />\n            <source src={videoWebm} />\n          </video>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default VideoModal;\n"]},"metadata":{},"sourceType":"module"}